// <auto-generated />
using System;
using InvoicesTask.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InvoicesTask.Migrations
{
    [DbContext(typeof(InvoiceContext))]
    partial class InvoiceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("InvoicesTask.Entities.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Ahmad"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Anas"
                        });
                });

            modelBuilder.Entity("InvoicesTask.Entities.Invoice", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StoreId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("InvoicesTask.Entities.InvoiceItem", b =>
                {
                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("InvoiceId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("InvoicesTask.Entities.Item", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Barcode = "123q",
                            Name = "Closet",
                            Price = 60.0
                        },
                        new
                        {
                            ID = 2,
                            Barcode = "123w",
                            Name = "Bed",
                            Price = 99.900000000000006
                        },
                        new
                        {
                            ID = 3,
                            Barcode = "123e",
                            Name = "Desk",
                            Price = 50.5
                        },
                        new
                        {
                            ID = 4,
                            Barcode = "123r",
                            Name = "Door",
                            Price = 73.5
                        },
                        new
                        {
                            ID = 5,
                            Barcode = "123t",
                            Name = "Vacuum Cleaner",
                            Price = 80.0
                        },
                        new
                        {
                            ID = 6,
                            Barcode = "123y",
                            Name = "BMW",
                            Price = 300.0
                        });
                });

            modelBuilder.Entity("InvoicesTask.Entities.Store", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "HouseWares Store"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Electricals store"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Cars Store"
                        });
                });

            modelBuilder.Entity("InvoicesTask.Entities.Invoice", b =>
                {
                    b.HasOne("InvoicesTask.Entities.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("InvoicesTask.Entities.Store", "Store")
                        .WithMany("Invoices")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("InvoicesTask.Entities.InvoiceItem", b =>
                {
                    b.HasOne("InvoicesTask.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("InvoicesTask.Entities.Item", "Item")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("InvoicesTask.Entities.Customer", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("InvoicesTask.Entities.Invoice", b =>
                {
                    b.Navigation("InvoiceItems");
                });

            modelBuilder.Entity("InvoicesTask.Entities.Item", b =>
                {
                    b.Navigation("InvoiceItems");
                });

            modelBuilder.Entity("InvoicesTask.Entities.Store", b =>
                {
                    b.Navigation("Invoices");
                });
#pragma warning restore 612, 618
        }
    }
}
